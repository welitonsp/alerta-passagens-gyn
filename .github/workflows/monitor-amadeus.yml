name: Monitoramento de Passagens (Amadeus Sandbox)

on:
  schedule:
    # Rode a cada 4 horas (ajuste se quiser)
    - cron: "7 */4 * * *"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: monitor-amadeus-${{ github.ref }}
  cancel-in-progress: false

jobs:
  monitor:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Smoke check de segredos
        env:
          AMADEUS_API_KEY:    ${{ secrets.AMADEUS_API_KEY }}
          AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, sys
          req = ["AMADEUS_API_KEY","AMADEUS_API_SECRET","TELEGRAM_BOT_TOKEN","TELEGRAM_CHAT_ID"]
          miss = [k for k in req if not os.getenv(k)]
          if miss:
              print("Faltam segredos:", miss)
              sys.exit(1)
          print("Segredos OK")
          PY

      - name: Executar monitor (sandbox)
        env:
          # --- Segredos / autenticação ---
          AMADEUS_API_KEY:    ${{ secrets.AMADEUS_API_KEY }}
          AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}

          # --- Ambiente Amadeus ---
          AMADEUS_ENV: sandbox

          # --- Configuração principal ---
          ORIGEM: "GYN"
          DESTINOS: "GIG,SDU,SSA,FOR,REC,NAT,MCZ,AJU,MAO,BEL,SLZ,THE,BSB,FLN,POA,CWB,CGR,CGB,CNF,VIX,JPA,PMW,PVH,BVB,RBR,GRU,CGH"
          CURRENCY: "BRL"

          # Varredura de datas
          DAYS_AHEAD_FROM: "10"
          DAYS_AHEAD_TO:   "90"
          SAMPLE_DEPARTURES: "2"
          STAY_NIGHTS_MIN: "5"
          STAY_NIGHTS_MAX: "7"

          # Busca Amadeus / rede
          MAX_OFFERS: "5"
          REQUEST_DELAY: "0.8"
          REQUEST_TIMEOUT: "30"
          MAX_RETRIES: "3"
          BACKOFF_FACTOR: "0.7"
          USER_AGENT: "FlightMonitor/1.3 (+github-actions)"
          TIME_BUDGET_SECONDS: "420"

          # Histórico
          HISTORY_PATH: "data/history.csv"

          # --- Regras de alerta (cap em 550 por trecho) ---
          MAX_PRECO_PP: "550"
          ONLY_CAP_BELOW: "true"        # só alerta se respeitar o teto
          LEG_CAP_ENFORCE_BOTH: "true"  # exige ida E volta <= 550

          # Alternativas na volta (informativo)
          SHOW_RETURN_ALTS: "true"
          ALT_TOP_N: "3"
          ALT_MIN_SAVING_BRL: "0"

          # Formatação do Telegram
          TG_PARSE_MODE: "HTML"
        run: |
          python monitor_passagens.py

      - name: Publicar histórico (artefato)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: history-csv
          path: data/history.csv
          if-no-files-found: ignore