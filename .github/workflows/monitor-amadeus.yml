name: Monitoramento de Passagens (Amadeus)

on:
  schedule:
    - cron: "0 */4 * * *"   # executa a cada 4h (UTC)
  workflow_dispatch:        # permite rodar manualmente

permissions:
  contents: write           # para comitar data/history.csv

jobs:
  monitor-passagens:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    concurrency:
      group: monitor-passagens
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Validate secrets (Amadeus & Telegram)
        env:
          HAS_KEY:    ${{ secrets.AMADEUS_API_KEY }}
          HAS_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          HAS_TG_TK:  ${{ secrets.TELEGRAM_BOT_TOKEN }}
          HAS_TG_ID:  ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          die(){ echo "::error::$1"; exit 1; }
          [ -n "$HAS_KEY" ]    || die "AMADEUS_API_KEY ausente em Secrets."
          [ -n "$HAS_SECRET" ] || die "AMADEUS_API_SECRET ausente em Secrets."
          [ -n "$HAS_TG_TK" ]  || echo "::warning::TELEGRAM_BOT_TOKEN não definido; notificações serão puladas."
          [ -n "$HAS_TG_ID" ]  || echo "::warning::TELEGRAM_CHAT_ID não definido; notificações serão puladas."

      - name: Ping Telegram (opcional)
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        env:
          BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, requests
          t=os.getenv("BOT_TOKEN"); c=os.getenv("CHAT_ID")
          r=requests.post(f"https://api.telegram.org/bot{t}/sendMessage",
                          json={"chat_id": int(c), "text": "✅ Monitor iniciando (sandbox)."},
                          timeout=20)
          print("HTTP", r.status_code); r.raise_for_status()
          PY

      - name: Run monitor (Amadeus)
        env:
          # --- segredos obrigatórios ---
          AMADEUS_API_KEY:    ${{ secrets.AMADEUS_API_KEY }}
          AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}

          # --- ambiente (sandbox = grátis) ---
          AMADEUS_ENV: sandbox

          # --- parâmetros principais ---
          ORIGEM: GYN
          DESTINOS: GIG,SDU,SSA,FOR,REC,NAT,MCZ,AJU,MAO,BEL,SLZ,THE,BSB,FLN,POA,CWB,CGR,CGB,CNF,VIX,JPA,PMW,PVH,BVB,RBR,GYN,GRU,CGH
          CURRENCY: BRL

          # --- amostragem e limites ---
          SAMPLE_DEPARTURES: "2"
          MAX_OFFERS: "5"
          REQUEST_DELAY: "1.2"

          # --- regras de alerta ---
          MAX_PRECO_PP: "1200"
          MIN_DISCOUNT_PCT: "0.25"

          # --- ida e volta (ative "1" p/ comparar com Google) ---
          ROUND_TRIP: "0"
          STAY_NIGHTS_MIN: "5"
          STAY_NIGHTS_MAX: "10"

          # --- histórico ---
          HISTORY_PATH: data/history.csv
        run: python monitor_passagens.py

      - name: Commit histórico (se mudou)
        if: always()
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(monitor): atualizar histórico de preços"
          file_pattern: |
            data/history.csv
