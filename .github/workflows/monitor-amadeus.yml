name: Monitor Amadeus (Sandbox)

on:
  schedule:
    - cron: "0 */4 * * *"   # a cada 4 horas (00, 04, 08, 12, 16, 20 UTC)
  workflow_dispatch:

concurrency:
  group: monitor-amadeus
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  run-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # ====== Segredos (definir em Settings > Secrets > Actions) ======
      AMADEUS_API_KEY:    ${{ secrets.AMADEUS_API_KEY }}
      AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}

      # ====== Amadeus (sandbox grátis) ======
      AMADEUS_ENV: sandbox
      # AMADEUS_BASE_URL: https://test.api.amadeus.com  # opcional; BASE é inferida do ENV

      # ====== Config principal ======
      ORIGEM: GYN
      # Para usar todas as capitais padrão, deixe DESTINOS comentado:
      # DESTINOS: GIG,SDU,SSA,FOR,REC,NAT,MCZ,AJU,MAO,BEL,SLZ,THE,BSB,FLN,POA,CWB,CGR,CGB,CNF,VIX,JPA,PMW,PVH,BVB,RBR,GRU,CGH

      CURRENCY: BRL
      DAYS_AHEAD_FROM: "10"
      DAYS_AHEAD_TO:   "90"
      STAY_NIGHTS_MIN: "5"
      STAY_NIGHTS_MAX: "7"
      SAMPLE_DEPARTURES: "2"

      # ====== Busca / rede ======
      MAX_OFFERS: "5"
      REQUEST_DELAY: "1.2"
      REQUEST_TIMEOUT: "30"
      MAX_RETRIES: "3"
      BACKOFF_FACTOR: "0.7"
      USER_AGENT: "FlightMonitor/2.0 (+github-actions)"
      TIME_BUDGET_SECONDS: "540"

      # ====== Regras de alerta ======
      # Cap TOTAL (ida+volta) — só alerta se total <= 550:
      MAX_PRECO_PP: "550"
      # “Desativa” queda percentual:
      MIN_DISCOUNT_PCT: "9.99"
      # Não exige cap por perna; usamos cap no TOTAL:
      LEG_CAP_ENFORCE_BOTH: "false"

      # ====== Modo IA ======
      AI_MODE: "true"
      AI_ENGINE: "heuristic"
      AI_ADD_TO_ALERT: "false"         # IA só gera insight textual
      AI_MIN_UNDERVALUE_PCT: "0.12"    # usado se AI_ADD_TO_ALERT=true

      # ====== Histórico / logs ======
      HISTORY_PATH: data/history.csv
      TG_PARSE_MODE: HTML
      LOG_LEVEL: INFO

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Para IA com sklearn (opcional), crie requirements-ml.txt e descomente:
          # if [ "${AI_ENGINE}" = "sklearn" ] && [ -f requirements-ml.txt ]; then
          #   pip install -r requirements-ml.txt
          # fi

      - name: Smoke check de segredos
        run: |
          python - <<'PY'
          import os, sys
          req = ["AMADEUS_API_KEY","AMADEUS_API_SECRET","TELEGRAM_BOT_TOKEN","TELEGRAM_CHAT_ID"]
          miss = [k for k in req if not os.getenv(k)]
          if miss:
              print("Faltam segredos:", miss)
              sys.exit(1)
          print("Segredos OK")
          PY

      - name: Preparar pastas e seed do CSV
        run: |
          mkdir -p data
          if [ ! -f "${HISTORY_PATH}" ]; then
            echo "ts_utc,origem,destino,departure_date,return_date,price_total,currency,leg_out_price,leg_out_airline,leg_ret_price,leg_ret_airline,notified,reason,deeplink" > "${HISTORY_PATH}"
          fi

      - name: Executar monitor
        run: |
          python monitor_passagens.py

      - name: Upload history.csv (artefato)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: history-csv
          path: ${{ env.HISTORY_PATH }}
          if-no-files-found: warn
          retention-days: 7

      - name: Upload logs (artefato)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: monitor-logs
          path: |
            flight_monitor.log
          if-no-files-found: warn
          retention-days: 7