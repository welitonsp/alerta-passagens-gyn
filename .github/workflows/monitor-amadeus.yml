name: Monitoramento de Passagens (Amadeus Sandbox)

on:
  schedule:
    - cron: "0 */4 * * *"   # Executa a cada 4h (UTC)
  workflow_dispatch:

permissions:
  contents: write           # Necess√°rio para comitar data/history.csv

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    concurrency:
      group: monitor-amadeus
      cancel-in-progress: true
    env:
      PYTHONUNBUFFERED: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Verifica se os secrets obrigat√≥rios est√£o presentes
      - name: Preflight - conferir secrets
        env:
          AMADEUS_API_KEY:    ${{ secrets.AMADEUS_API_KEY }}
          AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, sys
          required = ["AMADEUS_API_KEY","AMADEUS_API_SECRET","TELEGRAM_BOT_TOKEN","TELEGRAM_CHAT_ID"]
          missing = [k for k in required if not os.getenv(k)]
          if missing:
              print("Faltam secrets:", ", ".join(missing))
              sys.exit(1)
          print("‚úî Secrets OK")
          PY

      # Opcional: ping simples no Telegram (n√£o falha pipeline)
      - name: Ping Telegram (opcional)
        continue-on-error: true
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, requests
          t=os.getenv("TELEGRAM_BOT_TOKEN"); c=os.getenv("TELEGRAM_CHAT_ID")
          if t and c:
              r=requests.post(f"https://api.telegram.org/bot{t}/sendMessage",
                              json={"chat_id": int(c), "text": "ü§ñ Monitor pronto (sandbox)."}, timeout=20)
              print("HTTP", r.status_code, r.text[:200])
          PY

      # Opcional: checa OAuth da Amadeus (n√£o falha em caso de 5xx)
      - name: Preflight - token Amadeus (opcional)
        continue-on-error: true
        env:
          AMADEUS_API_KEY:    ${{ secrets.AMADEUS_API_KEY }}
          AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          AMADEUS_ENV:        sandbox
        run: |
          python - <<'PY'
          import os, requests
          env=os.getenv("AMADEUS_ENV","sandbox").lower()
          base="https://test.api.amadeus.com" if env in ("sandbox","test") else "https://api.amadeus.com"
          r=requests.post(f"{base}/v1/security/oauth2/token",
                          data={"grant_type":"client_credentials",
                                "client_id":os.getenv("AMADEUS_API_KEY"),
                                "client_secret":os.getenv("AMADEUS_API_SECRET")}, timeout=30)
          print("OAuth status:", r.status_code)
          print(r.text[:300])
          PY

      - name: Run monitor (Amadeus)
        env:
          # --- secrets obrigat√≥rios ---
          AMADEUS_API_KEY:    ${{ secrets.AMADEUS_API_KEY }}
          AMADEUS_API_SECRET: ${{ secrets.AMADEUS_API_SECRET }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}

          # --- ambiente / logs ---
          AMADEUS_ENV: sandbox          # fique no sandbox (teste)
          LOG_LEVEL: INFO               # DEBUG, INFO, WARNING, ERROR

          # --- par√¢metros do monitor ---
          ORIGEM: GYN
          DESTINOS: GIG,SDU,SSA,FOR,REC,NAT,MCZ,AJU,MAO,BEL,SLZ,THE,BSB,FLN,POA,CWB,CGR,CGB,CNF,VIX,JPA,PMW,PVH,BVB,RBR,GRU,CGH
          CURRENCY: BRL

          # amostragem de datas
          DAYS_AHEAD_FROM: "10"
          DAYS_AHEAD_TO:   "90"
          SAMPLE_DEPARTURES: "2"    # datas de ida testadas por destino

          # ida+volta (noites)
          ROUND_TRIP: "1"
          STAY_NIGHTS_MIN: "5"
          STAY_NIGHTS_MAX: "10"
          SAMPLE_STAYS: "0"         # 0 = todas as noites; use 2-3 para reduzir chamadas

          # limites / API
          MAX_OFFERS: "5"
          REQUEST_DELAY: "1.2"

          # regras de alerta (aplicadas ao TOTAL ida+volta)
          MAX_PRECO_PP: "1200"
          MIN_DISCOUNT_PCT: "0.25"

          # paths
          HISTORY_PATH: data/history.csv
          TOKEN_CACHE_PATH: data/amadeus_token.json
        run: |
          python monitor_passagens.py

      - name: Commit hist√≥rico (se houver altera√ß√µes)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(monitor): atualizar hist√≥rico de pre√ßos"
          file_pattern: data/history.csv